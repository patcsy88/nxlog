define ROOT /usr/bin

User nxlog
Group nxlog
Panic Soft

#PersistLogqueue TRUE
#SyncLogqueue TRUE
#CacheFlushInterval always
#CacheSync TRUE

Moduledir /usr/lib/nxlog/modules
CacheDir /var/spool/nxlog/data
PidFile /var/run/nxlog.pid
LogFile /var/log/nxlog/nxlog.log
LogLevel INFO

define LOGDIR /var/log/nxlog
define MYLOGFILE %LOGDIR%/nxlog.log
# Added by Patrick Cheong 2021-07-13
define DEVLOGDIR %LOGDIR%/devices/
define QUEUEDIR %LOGDIR%/queue/

# EXTENSIONS
<Extension gelfExt>
  Module xm_gelf
  # Avoid truncation of the short_message field to 64 characters.
  ShortMessageLength 65536
  #ShortMessageLength -1
</Extension>

<Extension syslogExt>
  Module xm_syslog
</Extension>

<Extension json>
    Module  xm_json
</Extension>

<Extension _fileop>
    Module  xm_fileop
</Extension>

# INPUTS
<Input mark>
    Module          im_mark
    MarkInterval    1
    Mark            -=| MARK |=-
</Input>

#<Input filein_json>
#    Module  im_file
#    File    "%QUEUEDIR%/*.log"
#    Exec    parse_json();
#</Input>

#<Input file>
#       Module im_file
#       File '/var/log/*.log'
#       PollInterval 1
#       SavePos True
#       ReadFromLast True
#       Recursive False
#       RenameCheck False
#       Exec $FileName = file_name(); # Send file name with each message
#</Input>

<Input syslogudp1>
    Module      im_udp
    Host        0.0.0.0
    Port        51400
    Exec        parse_syslog_bsd();
</Input>

<Input syslogudp2>
    Module      im_udp
    Host        0.0.0.0
    Port        51401
    <Exec>
        create_stat("msgrate", "RATE", 3600);
        add_stat("msgrate", 1);
    </Exec>
    <Schedule>
        Every   3600 sec
        <Exec>
            create_stat("msgrate", "RATE", 10);
            add_stat("msgrate", 0);
            if defined get_stat("msgrate") and get_stat("msgrate") <= 1
                log_error("No messages received from the source!");
        </Exec>
    </Schedule>
    #Exec        if not ($raw_event =~ /failed/ or $raw_event =~ /error/) drop();
    Exec        if ($raw_event =~ /Invalid Forward Delay/ or $raw_event =~ /invalid BPDU type/) drop();
    Exec        parse_syslog();
</Input>

<Input syslogtcp1>
    Module      im_tcp
    Host        0.0.0.0
    Port        51400
    Exec        parse_syslog();
</Input>

<Input syslogtcp2>
    Module      im_tcp
    Host        0.0.0.0
    Port        51401
    <Exec>
        create_stat("msgrate", "RATE", 3600);
        add_stat("msgrate", 1);
    </Exec>
    <Schedule>
        Every   3600 sec
        <Exec>
            create_stat("msgrate", "RATE", 10);
            add_stat("msgrate", 0);
            if defined get_stat("msgrate") and get_stat("msgrate") <= 1
                log_error("No messages received from the source!");
        </Exec>
    </Schedule>
    Exec        if ($raw_event =~ /vpn_peer.ch30ng.org/ or $raw_event =~ /7d91dda6be60/ or $raw_event =~ /9fda28559168/ or $raw_event =~ /40be2aa710e0/ or $raw_event =~ /50d7d1feaba0/) drop();
    Exec        parse_syslog();
</Input>

# PROCESSOR
#<Processor f_failed_error>
#    Module      pm_filter
#    Condition   $raw_event =~ /failed/ or $raw_event =~ /error/
#</Processor>

# OUTPUT
<Output gelftcp1>
        Module om_tcp
        Host jedimaster.ch30ng.org
        Port 12201
        OutputType  GELF_TCP
        <Exec>
          # These fields are needed for Graylog
          $gl2_source_collector = '618E795C-728F-4A82-94AB-D6C4BEDC89EA';
          $collector_node_id = 'jedimaster';
        </Exec>
</Output>

<Output fileout_json>
    Module      om_file
    File        "%DEVLOGDIR%/" + $Hostname + "_" + hostname() + strftime(now(), '_%Y-%m-%d') + ".log"
    <Schedule>
                When @daily
                 # Delete logs older than 30 days (24x60x60x30)
                Exec    file_remove('/var/log/nxlog/*.log', now() - 2592000);
    </Schedule>
    CreateDir   TRUE
    Exec        to_json();
</Output>

<Output fileout>
    Module  om_file
    File    "/tmp/nxlog_fileout.log"
</Output>

<Route route1>
    Path syslogtcp1 => gelftcp1
</Route>

<Route route2>
    Path syslogtcp2 => gelftcp1, fileout_json
</Route>

<Route route3>
    Path syslogudp1 => gelftcp1
</Route>

<Route route4>
    Path syslogudp2 => gelftcp1, fileout_json
</Route>

<Route route5>
    Path mark => gelftcp1
</Route>
